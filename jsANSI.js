// https://www.lookuptables.com/text/extended-ascii-table
var codes = {
    'Ç':128,
    'ü':129,
    'é':130,
    'â':131,
    'ä':132,
    'à':133,
    'å':134,
    'ç':135,
    'ê':136,
    'ë':137,
    'è':138,
    'ï':139,
    'î':140,
    'ì':141,
    'Ä':142,
    'Å':143,
    'É':144,
    '§':145,
    'Æ':146,
    'ô':147,
    'ö':148,
    'ò':149,
    'û':150,
    'ù':151,
    'ÿ':152,
    'Ö':153,
    'Ü':154,
    '¢':155,
    '£':156,
    '¥':157,
    '₧':158,
    'ƒ':159,
    'á':160,
    'í':161,
    'ó':162,
    'ú':163,
    'ñ':164,
    'Ñ':165,
    'ª':166,
    'º':167,
    '¿':168,
    '⌐':169,
    '¬':170,
    '½':171,
    '¼':172,
    '¡':173,
    '«':174,
    '»':175,
    '░':176,
    '▒':177,
    '▓':178,
    '│':179,
    '┤':180,
    '╡':181,
    '╢':182,
    '╖':183,
    '╕':184,
    '╣':185,
    '║':186,
    '╗':187,
    '╝':188,
    '╜':189,
    '╛':190,
    '┐':191,
    '└':192,
    '┴':193,
    '┬':194,
    '├':195,
    '─':196,
    '┼':197,
    '╞':198,
    '╟':199,
    '╚':200,
    '╔':201,
    '╩':202,
    '╦':203,
    '╠':204,
    '═':205,
    '╬':206,
    '╧':207,
    '╨':208,
    '╤':209,
    '╥':210,
    '╙':211,
    '╘':212,
    '╒':213,
    '╓':214,
    '╫':215,
    '╪':216,
    '┘':217,
    '┌':218,
    '█':219,
    '▄':220,
    '▌':221,
    '▐':222,
    '▀':223,
    'α':224,
    'ß':225,
    'Γ':226,
    'π':227,
    'Σ':228,
    'σ':229,
    'µ':230,
    'τ':231,
    'Φ':232,
    'Θ':233,
    'Ω':234,
    'δ':235,
    '∞':236,
    'φ':237,
    'ε':238,
    '∩':239,
    '≡':240,
    '±':241,
    '≥':242,
    '≤':243,
    '⌠':244,
    '⌡':245,
    '÷':246,
    '≈':247,
    '°':248,
    '∙':249,
    '·':250,
    '√':251,
    'ⁿ':252,
    '²':253,
    '■':254,
    ' ':255
}

var CP866 = {
    199:128,
    252:129,
    233:130,
    226:131,
    228:132,
    224:133,
    229:134,
    231:135,
    234:136,
    235:137,
    232:138,
    239:139,
    238:140,
    236:141,
    196:142,
    197:143,
    201:144,
    167:145,
    198:146,
    244:147,
    246:148,
    242:149,
    251:150,
    249:151,
    255:152,
    214:153,
    220:154,
    162:155,
    163:156,
    165:157,
    8359:158,
    402:159,
    225:160,
    237:161,
    243:162,
    250:163,
    241:164,
    209:165,
    170:166,
    186:167,
    191:168,
    8976:169,
    172:170,
    189:171,
    188:172,
    161:173,
    171:174,
    187:175,
    9617:176,
    9618:177,
    9619:178,
    9474:179,
    9508:180,
    9569:181,
    9570:182,
    9558:183,
    9557:184,
    9571:185,
    9553:186,
    9559:187,
    9565:188,
    9564:189,
    9563:190,
    9488:191,
    9492:192,
    9524:193,
    9500:195,
    9472:196,
    9532:197,
    9566:198,
    9567:199,
    9562:200,
    9556:201,
    9577:202,
    9574:203,
    9568:204,
    9552:205,
    9580:206,
    9575:207,
    9576:208,
    9572:209,
    9573:210,
    9561:211,
    9560:212,
    9554:213,
    9555:214,
    9579:215,
    9578:216,
    9496:217,
    9484:218,
    9608:219,
    9604:220,
    9612:221,
    9616:222,
    9600:223,
    945:224,
    223:225,
    915:226,
    960:227,
    931:228,
    963:229,
    181:230,
    964:231,
    934:232,
    920:233,
    937:234,
    948:235,
    8734:236,
    966:237,
    949:238,
    8745:239,
    8801:240,
    177:241,
    8805:242,
    8804:243,
    8992:244,
    8993:245,
    247:246,
    8776:247,
    176:248,
    8729:249,
    183:250,
    8730:251,
    8319:252,
    178:253,
    9632:254,
    32:255
}

var font = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff],
    [0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00],
    [0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xd6, 0xd6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00],
    [0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0xee, 0x6c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x7c, 0x38, 0x38, 0x7c, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0xc6, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00],
    [0x00, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x1c, 0x36, 0x32, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00],
    [0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00],
    [0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x18, 0x70, 0x00, 0x00],
    [0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x18, 0x70, 0x00, 0x00],
    [0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x38, 0x6c, 0x38, 0x10, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x0c, 0x18, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x36, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00],
    [0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00],
    [0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x60, 0xe0, 0x62, 0x66, 0x6c, 0x18, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00, 0x00],
    [0x00, 0x60, 0xe0, 0x62, 0x66, 0x6c, 0x18, 0x30, 0x66, 0xce, 0x9a, 0x3f, 0x06, 0x06, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44],
    [0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa],
    [0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0],
    [0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f],
    [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x6c, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x3c, 0x66, 0x0c, 0x18, 0x32, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
];

function rgba(r, g, b, a = 1) {
    return ((255 * a) << 24) + (b << 16) + (g << 8) + (r);
}

class jsANSI {
    constructor(canvas, columns, rows, context = "2d") {
        const jsANSI = this

        this.canvas = canvas
        this.canvas.addEventListener("mousedown", function(event) {
            let rect = canvas.getBoundingClientRect()
            let x = event.clientX - rect.left
            let y = event.clientY - rect.top
            jsANSI.clicked(x, y)
        });
        this.context = this.canvas.getContext(context)

        this.columns = columns
        this.rows = rows

        this.bounds = new Frame({ width: this.columns, height: this.rows })

        this.width = columns * 8
        this.height = (rows + 1 ) * 16 

        this.buffered = false

        // this.imageData = this.context.getImageData(0, 0, this.width, this.height)
        this.imageData = this.context.createImageData(this.width, this.height)
        this.imageBuffer = new ArrayBuffer(this.imageData.data.length)
        this.imageBuffer8 = new Uint8ClampedArray(this.imageBuffer)
        this.imageArray = new Uint32Array(this.imageBuffer)

        this.objects = []
    }

    add(object) {
        this.objects.push(object)
    }

    clicked(x, y) {
        this.objects.forEach(object => {
            const px = Math.floor(x / 8)
            const py = Math.floor(y / 16)
            object.clicked(px, py, this.bounds)
        })
    }

    dirty() {
        const objects = this.objects
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].dirty) {
                return true
            }
        }
        return false
    }

    // https://encoding.spec.whatwg.org/index-ibm866.txt
    decode(charCode, codePage) {
        var c = charCode > 127 ? codePage[charCode] : charCode
        if (c === null || c === undefined) { c = charCode }
        return c;
    }

    buffer(charCode, x, y, style) {
        if (charCode > 255) { charCode = 0 }
        this.bufferBits(font[charCode], x, y, style)
    }

    bufferBits(charBits, x, y, style) {
        const columns = this.columns
        const rows = this.rows
        if (x < 0 || x >= columns || y < 0 || y >= rows) {
            return
        }

        this.buffered = true;

        const imageArray = this.imageArray
        const width = this.width

        const color = style.color
        const bgColor = style.backgroundColor

        var bit = 0
        var bits;
        for (var bitRow = (y*16); bitRow < (y*16)+16; bitRow++) {
            bits = charBits[bit++]
            for (var bitColumn = (x*8)+7; bitColumn >= (x*8); bitColumn--) {
                imageArray[bitRow * width + bitColumn] = bits & 1 ? color : bgColor
                bits >>= 1
            }
        }
    }

    scroll() {
        const imageArray = this.imageArray
        const width = this.width

        for (var x = 0; x < this.columns; x++) {
            for (var y = 0; y < this.rows; y++) {
                for (var bitRow = (y*16); bitRow < (y*16)+16; bitRow++) {
                    for (var bitColumn = (x*8)+7; bitColumn >= (x*8); bitColumn--) {
                        imageArray[bitRow * width + bitColumn] =
                            imageArray[(bitRow + 16) * width + bitColumn];
                    }
                }
            }
        }
    }

    clear() {
        // for (let i = 0; i < this.imageBuffer8.length; i++) {
        //     this.imageBuffer8[i] = 0
        // }
        // this.imageBuffer8.fill(0)
        this.imageArray.fill(0)

        this.buffered = true;
    }

    render(x = 0, y = 0) {
        if (this.buffered) {
            this.imageData.data.set(this.imageBuffer8)
            this.context.putImageData(this.imageData, x, y)
        }
        this.buffered = false;
    }

    // https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/
    draw(clear = true) {
        if (!this.dirty()) {
            return
        }

        if (clear) {
            this.clear();
        }

        const objects = this.objects
        for (var i = 0; i < objects.length; i++) {
            const object = objects[i]
            if (object.dirty) {
                object.pointCache.clear()
                object.update()
                object.dirty = false
            }
            object.draw(this, this.bounds)
        }

        this.render()
    }
}

// https://blog.jeremylikness.com/blog/client-side-javascript-databinding-without-a-framework/
class Observable {
    constructor(value) {
      this._listeners = [];
      this._value = value;
    }

    notify() {
      this._listeners.forEach(listener => listener(this._value));
    }

    subscribe(listener) {
      this._listeners.push(listener);
    }

    get value() {
      return this._value;
    }

    set value(value) {
      if (value !== this._value) {
        this._value = value;
        this.notify();
      }
    }
}

class Frame {
    constructor(frame) {
        this.x = frame?.x ?? 0
        this.y = frame?.y ?? 0
        this.width = frame?.width ?? 0
        this.height = frame?.height ?? 0
    }

    contains(x, y) {
        return this.x <= x && this.x + this.width >= x &&
            this.y <= y && this.y + this.height >= y
    }

    offset(x, y) {
        return new Frame({ x: this.x + x, y: this.y + y, width: this.width, height: this.height })
    }
}

class Listener {
    constructor() {
        this.callbacks = []
    }

    on(callback) {
        this.callbacks.push(callback);
    }

    did(event) {
        this.callbacks.forEach(callback => callback(event))
    }
}

class Style {
    constructor(style) {
        this.color = style?.color ?? rgba(211,215,207,1)
        this.backgroundColor = style?.backgroundColor ?? rgba(0,0,0,1)
        this.fill = style?.fill ?? true
    }
}

class Object {
    constructor(x, y, style) {
        this.x = x
        this.y = y
        this.width = 0
        this.height = 0
        this.frame = new Frame()
        // TODO Refactor bounds to not depend on MAX_VALUE
        this.bounds = new Frame({ x:Number.MAX_VALUE, y:Number.MAX_VALUE })
        this.style = new Style(style)
        this.pointCache = new Map()
        this.click = new Listener()
        this.dirty = true
    }

    get dirty() {
        return this._dirty
    }
    set dirty(dirty) {
        this._dirty = dirty
    }

    // TODO Convert to Point
    get x() {
        return this._x
    }
    set x(x) {
        if (this._x == x)
            return
        this.dirty = true
        this._x = x
    }

    get y() {
        return this._y
    }
    set y(y) {
        if (this._y == y)
            return
        this.dirty = true
        this._y = y
    }

    get width() {
        return this._width;
    }
    set width(width) {
        if (this._width == width)
            return
        this.dirty = true
        this._width = width
    }

    get height() {
        return this._height;
    }
    set height(height) {
        if (this._height == height)
            return
        this.dirty = true
        this._height = height
    }

    update() {
    }

    clicked(x, y) {
    }

    fill(x, y) {
        if (this.pointCache.has(x)) {
            if (this.pointCache.get(x).get(y))
                return
        }

        this.cachePoint(x, y)

        const bounds = this.bounds
        if (x-1 > bounds.x)
            this.fill(x-1,y)
        if (x+1 < bounds.x + bounds.width)
            this.fill(x+1,y)
        if (y-1 > bounds.y)
            this.fill(x,y-1)
        if (y+1 < bounds.y + bounds.height)
            this.fill(x,y+1)
    }

    cachePoint(x, y) {
        if (x > 300) {
            throw new Error("Invalid cachePoint")
        }
        const pointCache = this.pointCache
        if (!pointCache.has(x)) {
            pointCache.set(x, new Map())
        }
        const pointCacheX = pointCache.get(x)

        const charCode = (y % 2 == 0) ?
            (pointCacheX.has(y + 1) ? 219 : 223) :
            (pointCacheX.has(y - 1) ? 219 : 220)

        pointCacheX.set(y, charCode)
    }

    renderPoint(ansi, charCode, x, y) {
        ansi.buffer(charCode, x, Math.floor(y/2), this.style)
    }

    draw(ansi) {
        throw new Error('Method is abstract');
    }
}

class View extends Object {
    constructor(x, y, width, height) {
        super(x, y)
        this.width = width
        this.height = height
        this.objects = []
    }

    get dirty() {
        if (super.dirty) {
            return true
        }

        for (let i = 0; i < this.objects.length; i++) {
            const object = this.objects[i]
            if (object.dirty) {
                return true
            }
        }
        return false
    }
    set dirty(dirty) {
        super.dirty = dirty
        if (super.dirty) {
            this.objects?.forEach(object => {
                object.dirty = true
            })
        }
    }

    add(object) {
        this.objects.push(object)
        return object
    }

    clicked(x, y, frame) {
        this.objects.forEach(object => {
            object.clicked(x, y, frame.offset(this.x, this.y))
        })
    }

    // TODO??? Move to Object
    draw(ansi, frame) {
        for (let i = 0; i < this.objects.length; i++) {
            const object = this.objects[i]
            if (object.dirty) {
                object.pointCache.clear()
                object.update()
                object.dirty = false
            }
            object.draw(ansi, frame.offset(this.x, this.y))
        }
        // this.objects.forEach(object => object.draw(ansi, frame.offset(this.x, this.y)))
    }
}

// TODO??? Rename to Label
class Text extends Object {
    constructor(text, x, y, style) {
        super(x, y, style)
        this._text = text
        this.formatter = (text) => `${text}`
    }

    get text() {
        return this.formatter(this._text)
    }
    set text(text) {
        if (this._text == text)
            return
        super.dirty = true
        this._text = text
    }

    bind(observable) {
        observable.subscribe(text => this.text = text)
    }

    clicked(x, y, frame) {
        const formatted = this.text

        const offset = frame.offset(this.x, this.y)
        if (offset.x <= x && offset.x + formatted.length > x && offset.y == y) {
            this.click.did({ x:x, y:y })
        }
    }

    draw(ansi, frame) {
        const formatted = this.text

        var x = frame.x + this.x
        var y = frame.y + this.y

        for (var i = 0; i < formatted.length; i++) {
            const charCode = formatted.charCodeAt(i)
            // const code = formatted.charCodeAt(i)
            // const charCode = code > 127 ? extended[code] : code
            // if (charCode === 10) {
                // x = this.x, y++
            // } else {
                ansi.buffer(charCode, +x++, y, this.style)
            // }
        }
    }
}

class Shape extends Object {
    constructor(x, y, width, height, style) {
        super(x, y, style)

        this.width = width - 1
        this.height = height - 1
        this.closed = true
        this.scale = 1
        this.angle = 0
    }

    get width() {
        return super.width * this.scale;
    }
    set width(width) {
        super.width = width
    }

    get height() {
        return super.height * this.scale;
    }
    set height(height) {
        super.height = height
    }

    get scale() {
        return this._scale
    }
    set scale(scale) {
        if (this._scale == scale)
            return
        this.dirty = true
        this._scale = scale
    }

    get angle() {
        return this._angle
    }
    set angle(angle) {
        if (this._angle == angle)
            return
        this.dirty = true
        this._angle = angle
    }

    radians(degrees) {
        return degrees * (Math.PI / 180);
    }

    rotatePoint(cx, cy, angle, p) {
        const s = Math.sin(angle);
        const c = Math.cos(angle);

        // translate point back to origin:
        p.x -= cx;
        p.y -= cy;

        // rotate point
        const xnew = p.x * c - p.y * s;
        const ynew = p.x * s + p.y * c;

        // translate point back:
        p.x = Math.round(xnew + cx);
        p.y = Math.round(ynew + cy);
        return p;
    }
}

class Bezier extends Shape {
    constructor(x, y, points, style) {
        super(x, y, 0, 0, style)

        this.points = []
        points.forEach(point => this.points.push(point))

        this.pixels = []
    }

    get dirty() {
        if (super.dirty) {
            return true
        }
        for (var i = 0; i < this.points.length; i++) {
            if (this.points[i].dirty) {
                return true
            }
        }
        return false
    }
    set dirty(dirty) {
        super.dirty = dirty
        if (!dirty) {
            this.points.forEach(point => point.dirty = false)
        }
    }

    add(point) {
        this.points.push(point)
    }

    update() {
        const pixels = this.pixels
        pixels.length = 0

        // Copy points
        const points = this.points.map(point => point.offset(0, 0))

        if (this.angle != 0) {
            const radians = this.radians(this.angle)
            // TODO Frame offset
            // const center = new Point(this.x + (this.width / 2), this.y + (this.height / 2)).offset(frame.x, frame.y)
            const center = new Point(this.x + (this.width / 2), this.y + (this.height / 2))
            for (var i = 0; i < points.length; i++) {
                this.rotatePoint(center.x, center.y, radians, points[i])
            }
        }

        // TODO Calculate based on width
        const t = 1/150
        for (var j = 0; j < points.length / 3; j++) {
            for (var i = 0; i <= 1; i+=t) {
                const p = this.bezier(i, points[j*3], points[(j*3)+1], points[(j*3)+2])
                pixels.push(p)

                if (i > 0) {
                    const previous = pixels[pixels.length - 2]
                    if (previous.x == p.x && previous.y == p.y) {
                        pixels.pop()
                    }
                }

                // this.cachePoint(Math.round(p.x), Math.round(p.y));
            }
            pixels.push(points[(j*3)+2])

            const smoothed = this.smooth(pixels)
            smoothed.forEach(p => this.cachePoint(p.x, p.y));
        }
    }

    // https://rickyhan.com/jekyll/update/2018/11/22/pixel-art-algorithm-pixel-perfect.html
    smooth(path) {
        const smoothed = []

        for (var c = 0; c < path.length; ++c) {
          if (c > 0 && c+1 < path.length
            && (path[c-1].x == path[c].x || path[c-1].y == path[c].y)
            && (path[c+1].x == path[c].x || path[c+1].y == path[c].y)
            && path[c-1].x != path[c+1].x
            && path[c-1].y != path[c+1].y)
          {
            ++c
          }

          smoothed.push(path[c])
        }

        return smoothed
    }

    // http://members.chello.at/~easyfilter/bresenham.html
    // https://cantwell-tom.medium.com/custom-bezier-tool-for-pixel-art-164fd8caeb6a
    bezier(t, p0, p1, p2) {
        const ut = 1 - t
        const x = (p0.x * ut + p1.x * t) * ut + (p1.x * ut + p2.x * t) * t
        const y = (p0.y * ut + p1.y * t) * ut + (p1.y * ut + p2.y * t) * t

        return { x:Math.round(x), y:Math.round(y) }
        // return { x: this.bezier3(t, [p0.x, p1.x, p2.x]), y: this.bezier3(t, [p0.y, p1.y, p2.y]) }
    }

    // bezier3(t, arr) {
    //     var ut = 1 - t
    //     return Math.round((arr[0] * ut + arr[1] * t) * ut + (arr[1] * ut + arr[2] * t) * t)
    // }

    // bezier4(arr, t) {
    //     var ut = 1 - t
    //     var a1 = arr[1] * ut + arr[2] * t
    //     return ((arr[0] * ut + arr[1] * t) * ut + a1 * t) * ut + (a1 * ut + (arr[2] * ut + arr[3] * t) * t) * t
    // }

    draw(ansi) {
        this.pointCache.forEach((columns, x) => {
            columns.forEach((charCode, y) => {
                this.renderPoint(ansi, charCode, x, y)
            })
        })
    }
}

class Polygon extends Shape {
    constructor(x, y, width, height, style) {
        super(x, y, width, height, style)
        this.points = []
    }

    // https://classic.csunplugged.org/wp-content/uploads/2014/12/Lines.pdf
    line(x, y, x1, y1) {
        this.cachePoint(x, y)
        const dx = Math.abs(x1 - x),
            dy = Math.abs(y1 - y),
            sx = x < x1 ? 1 : -1,
            sy = y < y1 ? 1 : -1
        let err = dx - dy;

        while (x != x1 || y != y1) {
            const e2 = 2 * err;
            if (e2 > (dy * -1)) {
                err -= dy;
                x += sx;
            }
            if (e2 < dx) {
                err += dx;
                y += sy;
            }

            this.cachePoint(x, y)
        }
    }

    draw(ansi, frame) {
        const points = this.points.map(point => point.offset(frame.x, frame.y))

        // if (this.angle != 0) {
            const radians = this.radians(this.angle)
            const center = new Point(this.x + (this.width / 2), this.y + (this.height / 2)).offset(frame.x, frame.y)
            for (var i = 0; i < points.length; i++) {
                this.rotatePoint(center.x, center.y, radians, points[i])
            }
        // }

        let minX = Number.MAX_VALUE;
        let maxX = -Number.MAX_VALUE;
        let minY = Number.MAX_VALUE;
        let maxY = -Number.MAX_VALUE;

        for (var i = 0; i < points.length; i++) {
            const point1 = points[i]
            const point2 = points[i == points.length - 1 ? 0 : i + 1]

            if (i < points.length - 1) {
                this.line(point1.x, point1.y, point2.x, point2.y)
            } else {
                if (this.closed) {
                    this.line(point1.x, point1.y, point2.x, point2.y)
                }
            }

            const x = point1.x;
            const y = point1.y;
            minX = Math.min(minX, x);
            maxX = Math.max(maxX, x);
            minY = Math.min(minY, y);
            maxY = Math.max(maxY, y);
        }

        const width = maxX - minX;
        const height = maxY - minY;

        this.bounds.x = minX
        this.bounds.y = minY
        this.bounds.width = width
        this.bounds.height = height

        const x = Math.round(minX + (width / 2))
        const y = Math.round(minY + (height / 2))

        if (this.closed && this.style.fill) {
            for (var i = this.bounds.x + 1; i < this.bounds.x + this.bounds.width; i++) {
                for (var j = this.bounds.y + 1; j < this.bounds.y + this.bounds.height; j++) {
                    if (this.isPointInPoly(points, {x:i, y:j}) && !this.pointCache.get(i).has(j)) {
                        this.fill(i,j)
                        i, j = Number.MAX_VALUE
                    }
                }
            }
        }

        this.pointCache.forEach((columns, x) => {
            columns.forEach((charCode, y) => {
                this.renderPoint(ansi, charCode, x, y)
            })
        })
    }

    isPointInPoly(poly, pt){
        for(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)
            ((poly[i].y <= pt.y && pt.y < poly[j].y) || (poly[j].y <= pt.y && pt.y < poly[i].y))
            && (pt.x < (poly[j].x - poly[i].x) * (pt.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x)
            && (c = !c);
        return c;
    }
}

class Line extends Polygon {
    constructor(x, y, x2, y2, style) {
        super(x, y, Math.abs(x2 - x), Math.abs(y2 - y), style)
        this.x2 = x2
        this.y2 = y2
        this.closed = false
    }

    update() {
        const x = this.x, y = this.y
        const x2 = this.x2, y2 = this.y2

        const points = this.points
        points[0] = new Point(x, y)
        points[1] = new Point(x2, y2)
    }
}

class Point {
    constructor(x, y) {
        this._x = x
        this._y = y
        this.dirty = true
    }

    get x() {
        return this._x
    }
    set x(x) {
        if (this._x == x)
            return
        this.dirty = true
        this._x = x
    }

    get y() {
        return this._y
    }
    set y(y) {
        if (this._y == y)
            return
        this.dirty = true
        this._y = y
    }

    offset(x, y) {
        return new Point(this.x + x, this.y + y)
    }
}

class Rectangle extends Polygon {
    constructor(x, y, width, height, style) {
        super(x, y, width, height, style)
    }

    update() {
        const x = this.x, y = this.y
        const width = this.width, height = this.height
        const points = this.points
        points[0] = new Point(x, y)
        points[1] = new Point(x + width, y)
        points[2] = new Point(x + width, y + height)
        points[3] = new Point(x, y + height)
    }
}

class Triangle extends Polygon {
    constructor(x, y, width, height, style) {
        super(x, y, width, height, style)
    }

    update() {
        const x = this.x, y = this.y
        const width = this.width, height = this.height
        const points = this.points
        points[0] = new Point(x + (width / 2), y)
        points[1] = new Point(x + width, y + height)
        points[2] = new Point(x, y + height)
    }
}

class Circle extends Shape {
    constructor(x, y, radius, style) {
        super(x, y, radius * 2, radius * 2, style)
        this.radius = radius
    }

    get radius() {
        return this._radius * this.scale;
    }
    set radius(radius) {
        if (this._radius == radius)
            return
        this.dirty = true
        this._radius = radius
        this.width = radius * 2
        this.height = radius * 2
    }

    draw(ansi) {
        const cX = this.x, cY = this.y, r = this.radius
        let x = this.radius, y = 0;

        // Printing the initial point
        // on the axes after translation
        this.cachePoint(x + cX, y + cY);

        // When radius is zero only a single
        // point will be printed
        if (r > 0) {
            this.cachePoint(-x + cX, y + cY);
            this.cachePoint(cX, -x + cY);
            this.cachePoint(cX, x + cY);
        }

        // Initialising the value of P
        let P = 1 - r;
        while (x > y) {
            y++;

            // Mid-point is inside or on the perimeter
            if (P <= 0)
                P = P + 2 * y + 1;

            // Mid-point is outside the perimeter
            else {
                x--;
                P = P + 2 * y - 2 * x + 1;
            }

            // All the perimeter points have already
            // been printed
            if (x < y)
                break;

            // Printing the generated point and its
            // reflection in the other octants after
            // translation
            this.cachePoint(x + cX, y + cY);
            this.cachePoint(-x + cX, y + cY);
            this.cachePoint(x + cX, -y + cY);
            this.cachePoint(-x + cX, -y + cY);

            // If the generated point is on the
            // line x = y then the perimeter points
            // have already been printed
            if (x != y) {
                this.cachePoint(y + cX, x + cY);
                this.cachePoint(-y + cX, x + cY);
                this.cachePoint(y + cX, -x + cY);
                this.cachePoint(-y + cX, -x + cY);
            }
        }

        this.bounds.x = this.x - this.radius
        this.bounds.y = this.y - this.radius
        this.bounds.width = this.radius * 2
        this.bounds.height = this.radius * 2

        if (this.style.fill) {
            this.fill(cX,cY)
        }

        this.pointCache.forEach((columns, x) => {
            columns.forEach((charCode, y) => {
                this.renderPoint(ansi, charCode, x, y)
            })
        })
    }
}

export { jsANSI, Observable, Object, Point, View, Text, Line, Rectangle, Triangle, Circle, Bezier, rgba, CP866 }
