function eye(i) {
    if (i === '') { return '' }
    const positions = [0,1,2,3,4]
    return positions[i].toString()
}

function parse(e1, e2) {
    // e1 = e1.split("").reverse().join("")
    // e2 = e2.split("").reverse().join("")
    // const e = e1.concat(e2)

    let eyes = []
    for (var i = 0; i < e1.length; i+=3) {
        // 83
        const g1 = eye(e1.charAt(i + 0)) + eye(e2.charAt(i + 0)) + eye(e1.charAt(i + 1))
        const g2 = eye(e2.charAt(i + 1)) + eye(e1.charAt(i + 2)) + eye(e2.charAt(i + 2))

        const i1 = g1.charAt(0), i2 = g1.charAt(1), i3 = g1.charAt(2)
        eyes.push(i1 + i2 + i3)
        if (g2 === '') { break; }

        const j1 = g2.charAt(0), j2 = g2.charAt(1), j3 = g2.charAt(2)
        eyes.push(j1 + j2 + j3)
    }
    // return encoded.join("")
    return eyes
}

function parse3(eyes) {
    console.log("eyes", eyes)
    const encoded = []
    const alt = eyes.map((v,i) => i % 2 === 0 ? v : v.split("").reverse().join("")).join("")
    // const alt = eyes.map((v,i) => v).join("")
    console.log("alt", alt.length, alt)

    for (var i = 0, j = 0; i < alt.length; i+=3) {
        const a1 = eye(alt[i + 0]) + eye(alt[i + 1]) + eye(alt[i + 2])
        encoded.push(a1)
        // encoded.push(i % 2 === 0 ? a1 : a1.split("").reverse().join(""))
    }
    // console.log(encoded.flat())
    return encoded
}

const m = [
    ['20101322330404113023211431303300402400031022104400020010404014414203302203424101400321211413004111010024124100403100113331220330103113111211210322314',
    '0320412200014222421222201100032013411132313131300311321201422313314413414412110403314323411221010100401204124424424021310424224130304110203123204313'],
    
    ['31101322330404113023211431303300402400402020104400010404404014414203302203413121222330324400024323111022123103102204302414221422203024200123212402323201403',
    '0320412200014222421222201100032013411011112131300011020201422313314413414414014034314012221113402103014133412213301323101322112130203222200422310313224113'],
    
    ['121013223304041130232114313033004024004302013230044210143001214140311024104223014113030144102020311114241034232132112001132210042231043242013103010200300221034201043101100200124',
    '132041220001422242122220110003201341132102441113222231403330130231010322441422141120120040103022122402040000103221040020142240312031330231000103310441201422131402022020141322311'],
    
    ['301014304231111130103200114211142042144110120210044012022014100202130013243312143110223024224201021223142200103111223122201000012143101233312010224203221',
    '132041002441200222141013240022220120402401130112010322313431422313213031100003203401230041222213132220230242140211440011010101321231103032030241320322030'],
    
    ['22101430400010030222023122223214414421131322331212013400414130231000123104313014021422202304200121424121122310401003400124024102023204304303122413131230114200103012422122403300321102421313323100104124012304',
    '3320410022224313410032420000102200424310200201400020212123111000031122201100320030210313002122103100003123320032404222323111302110210202223414121132403212304102101033004320314121114223304034000410423010104'],
    
    ['111014304044023101033232120113240032023033031134224144111303003142234042131112103133214200230011143034143033110122120120120123130011024014133021023002220044120224022234203033120244040200',
    '432041002342120301441212222401420211130431413200210141202112431230203111430021101132211120442310131321231020311022200210312220001440122003232142141332131220002121100141102242103402411442'],
    
    ['10101430400010000001021323312014213300310100422321003430014421422402220030002214323430012024223011030130200104003013021222214313030201310211310223000310323212202423010131123221303',
    '2320410022224312124304303001102034211303034110223132024033020302224411420101410123324013413413024413014124122223033224323314110324032001221031124314401202313421210220100323034034'],
    
    ['301014304000100000010213233120140040002211310214001032122241124300100131223313040210240103202210243021012103012033232204233241203302023301041204241012232101224314114042121114140130',
    '232041002222431212430430300110222113142030221230132301430413420300032332421140402211103132412102142440311122021431141311140311421232122410240132440030221440020231000031000102140011'],
    
    ['111014304000100000010213233120143044133101214223302024014144212222230212213233014110114103111010240110204010013100130102041041221134130133013243011042010221131224220222041',
    '332041002222431212430430300110211112430303411022401202041302002242420240341202211211130110441211112403410122040041213020203002240010120442311042111142031102232442101331431']
]

const m2 = [
    ["201013223304041130232114313033004024000",
    "032041220001422242122220110003201341113",
    "310221044000200104040144142033022034241",
    "231313130031132120142231331441341441211",
    "014003212114130041110100241241004031001",
    "040331432341122101010040120412442442402",
    "13331220330103113111211210322314",
    "1310424224130304110203123204313"],
    ["311013223304041130232114313033004024004",
    "032041220001422242122220110003201341101",
    "020201044000104044040144142033022034131",
    "111213130001102020142231331441341441401",
    "212223303244000243231110221231031022043",
    "403431401222111340210301413341221330132",
    "02414221422203024200123212402323201403",
    "3101322112130203222200422310313224113"],
    ["121013223304041130232114313033004024004",
    "132041220001422242122220110003201341132",
    "302013230044210143001214140311024104223",
    "102441113222231403330130231010322441422",
    "014113030144102020311114241034232132112",
    "141120120040103022122402040000103221040",
    "001132210042231043242013103010200300221",
    "020142240312031330231000103310441201422",
    "034201043101100200124",
    "131402022020141322311"],
    ["301014304231111130103200114211142042144",
    "132041002441200222141013240022220120402",
    "110120210044012022014100202130013243312",
    "401130112010322313431422313213031100003",
    "143110223024224201021223142200103111223",
    "203401230041222213132220230242140211440",
    "122201000012143101233312010224203221",
    "011010101321231103032030241320322030"],
    ["221014304000100302220231222232144144211",
    "332041002222431341003242000010220042431",
    "313223312120134004141302310001231043130",
    "020020140002021212311100003112220110032",
    "140214222023042001214241211223104010034",
    "003021031300212210310000312332003240422",
    "001240241020232043043031224131312301142",
    "232311130211021020222341412113240321230",
    "001030124221224033003211024213133231001",
    "410210103300432031412111422330403400041",
    "04124012304",
    "0423010104"],
    ["111014304044023101033232120113240032023",
    "432041002342120301441212222401420211130",
    "033031134224144111303003142234042131112",
    "431413200210141202112431230203111430021",
    "103133214200230011143034143033110122120",
    "101132211120442310131321231020311022200",
    "120120123130011024014133021023002220044",
    "210312220001440122003232142141332131220",
    "120224022234203033120244040200",
    "002121100141102242103402411442"],
    ["101014304000100000010213233120142133003",
    "232041002222431212430430300110203421130",
    "101004223210034300144214224022200300022",
    "303411022313202403302030222441142010141",
    "143234300120242230110301302001040030130",
    "012332401341341302441301412412222303322",
    "212222143130302013102113102230003103232",
    "432331411032403200122103112431440120231",
    "12202423010131123221303",
    "3421210220100323034034"],
    ["301014304000100000010213233120140040002",
    "232041002222431212430430300110222113142",
    "211310214001032122241124300100131223313",
    "030221230132301430413420300032332421140",
    "040210240103202210243021012103012033232",
    "402211103132412102142440311122021431141",
    "204233241203302023301041204241012232101",
    "311140311421232122410240132440030221440",
    "224314114042121114140130",
    "020231000031000102140011"],
    ["111014304000100000010213233120143044133",
    "332041002222431212430430300110211112430",
    "101214223302024014144212222230212213233",
    "303411022401202041302002242420240341202",
    "014110114103111010240110204010013100130",
    "211211130110441211112403410122040041213",
    "102041041221134130133013243011042010221",
    "020203002240010120442311042111142031102",
    "131224220222041",
    "232442101331431"]
]

const symbols = new Set()
for (var i = 0; i < 5; i++) {
    for (var j = 0; j < 5; j++) {
        for (var k = 0; k < 5; k++) {
            symbols.add([i,j,k].sort().join(""))
        }
    }
}
console.log(symbols)

const s = new Set()
const eee = ["0", "01", "02", "03", "04", "1", "12", "13", "14", "2", "23","24","3","34","4","123","234","341","412","012","013","014","023","024","034"]
eee.forEach(v => s.add([...v].sort().join("")))
console.log(s)

function diamond(g) {
    console.log("diamond", g)

    const s = [...symbols]

    const b = []
    for (var i = 0; i < g.length; i++) {
        const e = g[i].split("").sort().join("")
        b.push(s.indexOf(e))
        // const e1 = g[i].toString(5).padStart(3,'0')

        // const s2 = new Set()
        // for (var j = 0; j < e1.length; j++) {
        //     s2.add(e1[j])
        // }
        // const e2 = [...s2].sort().join("")
        // // console.log(s2, s.has(e2), e2)
        // b.push(e2)
    }

    // const s2 = [...s]
    // console.log(b)
    // console.log(s2)
    
    return b
    // return b.map(v => s2.indexOf(v))
    // return b.map(v => a[s2.indexOf(v)]).join("")
    // return b.map(v => s2.indexOf(v).toString().padStart(2,'0'))
}

const r = []
const r2 = new Set()
for (var i = 0; i < m.length; i++) {
    // const d = diamond(parse(m[i][0],m[i][1]))
    const d = diamond(parse3(m2[i]))
    // d.split("").forEach(v => r2.add(v))
    d.forEach(v => r2.add(v))
    r.push(d)
}
console.log([...r2].sort((a, b) => a - b))

const hebrew = "01234ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("")
console.log(hebrew.length, hebrew.join(""))

console.log(r)

const b = []
for (var i = 0; i < r.length; i++) {
    console.log(r[i])
    const a = []
    for (var j = 0, k = 0; j < r[i].length; j++) {
        let n = r[i][j]
        const l = hebrew[n % 35]
        a.push(l)
    }
    console.log(a.join(""))
    b.push(a.join(""))
}
console.log(b.join(""))
