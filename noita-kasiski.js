
class Arrays {
    static zip(a, b) {
        const zip = []

        const length = Math.min(a.length, b.length)
        for (var i = 0; i < length; i++) {
            zip.push([a[i], b[i]])
        }
        return zip
    }
}

function kappa_test(msg1, msg2, offset) {
    var m1 = msg1.slice(offset)
    // console.log("m1", m1)
    const m2 = msg2.slice(0, m1.length)
    // console.log("m2", m2)
    m1 = m1.slice(msg2.slice(0, m2.length + 1))
    // console.log("m1", m1)
    // console.log(offset)
    return [Arrays.zip(m1, m2).map(v => v[0] == v[1]).filter(v => v).length, m1.length]
}

function kappa_periodic(strings, start = 0, end = 15) {
    const bounds = Array.from({ length: end - start + 1 }, (_, i) => start + i);
    // console.log(bounds)

    const results_y = []
    for (const offset of bounds) {
        var matches = 0
        var checks = 0
        for (const msg1 of strings) {
            for (const msg2 of strings) {
                const match_check = kappa_test(msg1, msg2, offset)
                matches += match_check[0]
                checks += match_check[1]
            }
        }
        results_y.push(1000 * matches / checks)
    }
    return results_y.slice(0,-1)
}

const ct = "CVJTNAFENMCDMKBXFSTKLHGSOJWHOFUISFYFBEXEINFIMAYSSDYYIJNPWTOKFRHWVWTZFXHLUYUMSGVDURBWBIVXFAFMYFYXPIGBHWIFHHOJBEXAUNFIYLJWDKNHGAOVBHHGVINAULZFOFUQCVFBYNFTYGMMSVGXCFZFOKQATUIFUFERQTEWZFOKMWOJYLNZBKSHOEBPNAYTFKNXLBVUAXCXUYYKYTFRHRCFUYCLUKTVGUFQBESWYSSWLBYFEFZVUWTRLLNGIZGBMSZKBTNTSLNNMDPMYMIUBVMTLOBJHHFWTJNAUFIZMBZLIVHMBSUWLBYFEUYFUFENBRVJVKOLLGTVUZUAOJNVUWTRLMBATZMFSSOJQXLFPKNAULJCIOYVDRYLUJMVMLVMUKBTNAMFPXXJPDYFIJFYUWSGVIUMBWSTUXMSSNYKYDJMCGASOUXBYSMCMEUNFJNAUFUYUMWSFJUKQWSVXXUVUFFBPWBCFYLWFDYGUKDRYLUJMFPXXEFZQXYHGFLACEBJBXQSTWIKNMORNXCJFAIBWWBKCMUKIVQTMNBCCTHLJYIGIMSYCFVMURMAYOBJUFVAUZINMATCYPBANKBXLWJJNXUJTWIKBATCIOYBPPZHLZJJZHLLVEYAIFPLLYIJIZMOUDPLLTHVEVUMBXPIBBMSNSCMCGONBHCKIVLXMGCRMXNZBKQHODESYTVGOUGTHAGRHRMHFREYIJIZGAUNFZIYZWOUYWQZPZMAYJFJIKOVFKBTNOPLFWHGUSYTLGNRHBZSOPMIYSLWIKBANYUOYAPWZXHVFUQAIATYYKYKPMCEYLIRNPCDMEIMFGWVBBMUPLHMLQJWUGSKQVUDZGSYCFBSWVCHZXFEXXXAQROLYXPIUKYHMPNAYFOFHXBSWVCHZXFEXXXAIRPXXGOVHHGGSVNHWSFJUKNZBESHOKIRFEXGUFVKOLVJNAYIVVMMCGOFZACKEVUMBATVHKIDMVXBHLIVWTJAUFFACKHCIKSFPKYQNWOLUMYVXYYKYAOYYPUKXFLMBQOFLACKPWZXHUFJYGZGSTYWZGSNBBWZIVMNZXFIYWXWBKBAYJFTIFYKIZMUIVZDINLFFUVRGSSBUGNGOPQAILIFOZBZFYUWHGIRHWCFIZMWYSUYMAUDMIYVYAWVNAYTFEYYCLPWBBMVZZHZUHMRWXCFUYYVIENFHPYSMKBTMOIZWAIXZFOLBSMCHHNOJKBMBATZXXJSSKNAULBJCLFWXDSUYKUCIOYJGFLMBWHFIWIXSFGXCZBMYMBWTRGXXSHXYKZGSDSLYDGNBXHAUJBTFDQCYTMWNPWHOFUISMIFFVXFSVFRNA"

{
    // https://crypto.interactive-maths.com/kasiski-analysis-breaking-the-code.html
    console.log("CVJTN")
    console.log(ct.duplicates(4,4))
    console.log(ct.indexOf("ZFOK"))
    console.log(ct.indexOf("ZFOK", 163))
    console.log(factors(18))
    console.log(new Kasiski(ct).index("ZFOK"))
    console.log(new Kasiski(ct).index("NAUL"))
    console.log(new Kasiski(ct).indexes(ct.duplicates(4,4)))
    console.log(new Kasiski(ct).distances(3,4))
    console.log(chunk(ct, 6))
    console.log(new Kasiski(ct).frequency(6))
    console.log(new Kasiski(ct).key(6))
    console.log(Vigenere.decrypt(ct, "BAAAAA", az26))
    console.log(Vigenere.decrypt(ct, "BRUTUO", az26))
    console.log(kappa_periodic([ct]))
}

{
    const ct = "ZQQTK PQUWD PGMWD BQTXY LFQWL SHAJB UCIPV KUQEJ RBAAC LRSIZ ZCRWT LDFMT PGYXF ISOSE ASZXN PHTAY HHIIR ADDIJ LBFOE VKUWW VFFLV TCEXG HFFXF ZVGXF BFQEI ZOSEZ UGFGF UJUGK PCZWZ UQQJI VAFLV CSDCX YOPYR SQTEI HQFII VTAYI LRGGR AWARN LAGWK JCZXZ UIMPC FTAVX LHMRU LAMRT PDMXV VIDWV SJQWW YCYOE VKXIU NSBVV CWAYJ SMMGH BWDIU DSYYJ AGQXR ZWPIF SRZSK PCZWR URQQS YOOIW YSELF USEEE KOEAV SSMVE DSYYJ APQHR PZKYE SSMVE PBSWF TSFLZ UUILZ JVUXY HGOSJ AIERF ZAMPC SONSL YOZHR ULUIK FHAET XIUVV HBPXY PGPMW MWOYC AMMXK HQTIJ PHEIC MAAVV JZAWV SMFSR UOSIZ UKTMT ODDSX YSEWY HGSEZ USPEJ AFARX HGOIE KSZGP VJQVG YSVYU PQQEE KWZAY PQTTV YGARJ HBPXY PBSWR YSPEP IMPEP MWZHZ UUFLV PFDIR SZQZV SWZPZ LIAJK OSUVT VBHIE AWARR SJMPL LHTIJ HAQTI PBOMG SSEAY PQTLR CSEAV WHMAR FHDEU PHUSE HZMFL ZSEEE KKTMT OODID HYURX YOBMU OOHST HAARX AVQVV CSZYV ZCRWZ USOYI PGFWR UREXI PDBME NHTIK OWZXR DRDCM LWXJI VAMXK YOOXZ CSEYG LFEXZ AWARJ HFQAF YYURX HGMGK PJQPP PBXMK LFMXL YSMWZ UGAGZ LHKXY LQDIU BZUXP VTARV DFUXV YCDXY LDMVK POXMK FCREE VHTII MWZHJ HGBSN LFRYC HHAYT OGFSE LOZHR ZKTSC LGAQV HQTEJ AWEID LBFME AVQLV HZFLP ZQQTK PQUWD VTMXV TDQVR ASOPR ZGAJR UHMKF UWEXJ HGFLV KFQED ZCRGF UGQVM HHUWD VFFLV PABSJ AIDIJ VTBPL YOXMJ AGURV JIDIJ PBFLV JVGVT OVUWK VFKEE KHDEU PHUSE DVQXY LFAJR UQUIE ACDGF TDMVR AWHIC FFQGV UHFMD LGMVV ZINNV JHQHK VJQVP KWRJV YSZXY HBPPZ UURVF THTEK DVUGY AVQME KIXKV UQQSI JFQHL SWFCF MTAVD LFMKV ZQAYC KOXPF DAQVV ZHMXV TSZXJ HFQNV HZAYJ SMIEK JVQHR URFLV TCFMM LGAJK OSIVZ ASDJF YAMWZ TDAVK HBFEE PBSVV KWQRK PBFLV HBMPP ZWESW OWELZ ZHAVP HGFLV MOOXJ OSDIT VFPWG YCNES PZUXP PGMTF DSDJL SOZHK YCGFC LGAQV ASEXR URUXZ ZPKXY PGFVF BPXIJ VAQWK HBPEI KHTEK HZMVX LDAVK PCZSW OWEXF YWOEC LJUHV UQQMJ ZWRXV KQARJ PGFIE JMUWE VZQWJ WSDXZ UOOMF BGMRU LLMGK PBSME PHEHV TOZHJ PBNVZ LTFSN YWFIR OWEXF YMIID BGFOE VKYSI LHTEE TSDIW HQFWY BAMRE HHGVV CWQAV KIZHV YOZME KIOXZ VBAJV EHQRU LRQBG LFUIE JSUWK OSNIJ AVQPG ACFLV JFUXZ JWEQF MVGQR UVUWK VFKLZ ZHAVZ JOXGY HFMGK LFEGR UCZPP ISQWK PAMXV KPKXY LGFEE KODHN OWOLY BAMRV EDQVZ LBOIN OSFLV YOOXL HZAVK YOPMK PCZEI FVMWW BFZMJ OSPXF MCDQT VFDIT AJUIN ZCRME KWHMU BOXWN LAGWK YSSEI KHTID HGRSI TWZKG HFFWF MOSVV HHILF SSIID BGFQV HGGVV AVQQS FHTIZ YFQPR AWARK VHTID HGESW ISURX ZPKAY VAFLV FODIJ BFDSL URQHR URURT VBFID WZMXZ UUFLV PBOMU LBFWZ UHTIZ YZUZV ZCDGF URUXZ VBILZ JVFVR KWFMF UVMWY HBPIU KCIRK VIEAV TIEXI HHTII JCZWZ KSDXY LUQRV YOXFV HFURX VTFLV DVAPV UODVR AWHIK OOZXY LFQWG LQFMM LDDSS HPUPZ AMAJZ AGPIK HWXW".replace(/ /g, "")
    const kt = new Kasiski(ct).key(5)
    console.log(kt)
}

{
    const pt = "THISISATESTOFTHEEMERGENCYBROADCASTSYSTEMIFTHISWEREONLYATEST"
    const ct = Vigenere.encrypt(pt, "READY")
    console.log("READY", ct.ic(3,10))
    console.log(new Kasiski(ct).distances(3,4))
    const kt = new Kasiski(ct).key(5)
    console.log(kt)
}

{
    // TODO???
    const pt = "MUST CHANGE MEETING LOCATION FROM BRIDGE TO UNDERPASS SINCE ENEMY AGENTS ARE BELIEVED TO HAVE BEEN ASSIGNED TO WATCH BRIDGE STOP  MEETING TIME UNCHANGED".replace(/ /g, "")
    // const ct = "QPWKA LVRXC QZIKG RBPFA EOMFL  JMSDZ VDHXC XJYEB IMTRQ WNMEA IZRVK CVKVL XNEIC FZPZC ZZHKM  LVZVZ IZRRQ WDKEC HOSNY XXLSP MYKVQ XJTDC IOMEE XDQVS RXLRL  KZHOV".replace(/ /g, "")
    // const ct = Vigenere.encrypt(pt, "EVERY", az83)
    const ct = Vigenere.encrypt(pt, "EVERYTHING")
    console.log(new Kasiski(ct).distances(3,4))
    
    // const kt = new Kasiski(ct).key(5, az83)
    const kt = new Kasiski(ct).key(10)
    console.log(kt)
    console.log(Chi.key(ct, 10))
}

{
    const ctreplace(/ /g, "")
    console.log("JAKXQ", ct.ic(3,10))
    console.log(new Kasiski(ct).distances(3,4))
    console.log(new Kasiski(ct).key(4))
}

{
    const ct = "ZQQTK PQUWD PGMWD BQTXY LFQWL SHAJB UCIPV KUQEJ RBAAC LRSIZ ZCRWT LDFMT PGYXF ISOSE ASZXN PHTAY HHIIR ADDIJ LBFOE VKUWW VFFLV TCEXG HFFXF ZVGXF BFQEI ZOSEZ UGFGF UJUGK PCZWZ UQQJI VAFLV CSDCX YOPYR SQTEI HQFII VTAYI LRGGR AWARN LAGWK JCZXZ UIMPC FTAVX LHMRU LAMRT PDMXV VIDWV SJQWW YCYOE VKXIU NSBVV CWAYJ SMMGH BWDIU DSYYJ AGQXR ZWPIF SRZSK PCZWR URQQS YOOIW YSELF USEEE KOEAV SSMVE DSYYJ APQHR PZKYE SSMVE PBSWF TSFLZ UUILZ JVUXY HGOSJ AIERF ZAMPC SONSL YOZHR ULUIK FHAET XIUVV HBPXY PGPMW MWOYC AMMXK HQTIJ PHEIC MAAVV JZAWV SMFSR UOSIZ UKTMT ODDSX YSEWY HGSEZ USPEJ AFARX HGOIE KSZGP VJQVG YSVYU PQQEE KWZAY PQTTV YGARJ HBPXY PBSWR YSPEP IMPEP MWZHZ UUFLV PFDIR SZQZV SWZPZ LIAJK OSUVT VBHIE AWARR SJMPL LHTIJ HAQTI PBOMG SSEAY PQTLR CSEAV WHMAR FHDEU PHUSE HZMFL ZSEEE KKTMT OODID HYURX YOBMU OOHST HAARX AVQVV CSZYV ZCRWZ USOYI PGFWR UREXI PDBME NHTIK OWZXR DRDCM LWXJI VAMXK YOOXZ CSEYG LFEXZ AWARJ HFQAF YYURX HGMGK PJQPP PBXMK LFMXL YSMWZ UGAGZ LHKXY LQDIU BZUXP VTARV DFUXV YCDXY LDMVK POXMK FCREE VHTII MWZHJ HGBSN LFRYC HHAYT OGFSE LOZHR ZKTSC LGAQV HQTEJ AWEID LBFME AVQLV HZFLP ZQQTK PQUWD VTMXV TDQVR ASOPR ZGAJR UHMKF UWEXJ HGFLV KFQED ZCRGF UGQVM HHUWD VFFLV PABSJ AIDIJ VTBPL YOXMJ AGURV JIDIJ PBFLV JVGVT OVUWK VFKEE KHDEU PHUSE DVQXY LFAJR UQUIE ACDGF TDMVR AWHIC FFQGV UHFMD LGMVV ZINNV JHQHK VJQVP KWRJV YSZXY HBPPZ UURVF THTEK DVUGY AVQME KIXKV UQQSI JFQHL SWFCF MTAVD LFMKV ZQAYC KOXPF DAQVV ZHMXV TSZXJ HFQNV HZAYJ SMIEK JVQHR URFLV TCFMM LGAJK OSIVZ ASDJF YAMWZ TDAVK HBFEE PBSVV KWQRK PBFLV HBMPP ZWESW OWELZ ZHAVP HGFLV MOOXJ OSDIT VFPWG YCNES PZUXP PGMTF DSDJL SOZHK YCGFC LGAQV ASEXR URUXZ ZPKXY PGFVF BPXIJ VAQWK HBPEI KHTEK HZMVX LDAVK PCZSW OWEXF YWOEC LJUHV UQQMJ ZWRXV KQARJ PGFIE JMUWE VZQWJ WSDXZ UOOMF BGMRU LLMGK PBSME PHEHV TOZHJ PBNVZ LTFSN YWFIR OWEXF YMIID BGFOE VKYSI LHTEE TSDIW HQFWY BAMRE HHGVV CWQAV KIZHV YOZME KIOXZ VBAJV EHQRU LRQBG LFUIE JSUWK OSNIJ AVQPG ACFLV JFUXZ JWEQF MVGQR UVUWK VFKLZ ZHAVZ JOXGY HFMGK LFEGR UCZPP ISQWK PAMXV KPKXY LGFEE KODHN OWOLY BAMRV EDQVZ LBOIN OSFLV YOOXL HZAVK YOPMK PCZEI FVMWW BFZMJ OSPXF MCDQT VFDIT AJUIN ZCRME KWHMU BOXWN LAGWK YSSEI KHTID HGRSI TWZKG HFFWF MOSVV HHILF SSIID BGFQV HGGVV AVQQS FHTIZ YFQPR AWARK VHTID HGESW ISURX ZPKAY VAFLV FODIJ BFDSL URQHR URURT VBFID WZMXZ UUFLV PBOMU LBFWZ UHTIZ YZUZV ZCDGF URUXZ VBILZ JVFVR KWFMF UVMWY HBPIU KCIRK VIEAV TIEXI HHTII JCZWZ KSDXY LUQRV YOXFV HFURX VTFLV DVAPV UODVR AWHIK OOZXY LFQWG LQFMM LDDSS HPUPZ AMAJZ AGPIK HWXW".replace(/ /g, "")
    console.log(ct.ic(2, 15))
}

{
    const ctreplace(/ /g, "")
    console.log("RHVST")
    console.log(ct.ic(2, 15))
    console.log(new Kasiski(ct).distances(3,4))
    console.log(new Kasiski(ct).key(13))
    console.log(kappa_periodic([ct]))
}

// {
//     const eyes = decode(10, [0,1,2,3,4])
//     console.log(eyes[0].ic(3, 99, az83))
//     console.log(new Kasiski(eyes[0]).distances(3,10))

//     const isomorphs = new Array(eyes[0]).isomorphs(4,18,2,15)
//     console.log(Isomorphs.prune(Isomorphs.index(isomorphs, [eyes[0]])))
//     console.log(Numbers.gcf([28,30,35]))
// }

{
    const ct = "QPWKA LVRXC QZIKG RBPFA EOMFL  JMSDZ VDHXC XJYEB IMTRQ WNMEA IZRVK CVKVL XNEIC FZPZC ZZHKM  LVZVZ IZRRQ WDKEC HOSNY XXLSP MYKVQ XJTDC IOMEE XDQVS RXLRL  KZHOV".replace(/ /g, "")
    console.log("QPWKA")
    console.log(ct.ic(1, 10))
    console.log(new Kasiski(ct).distances(3,4))
    console.log(new Kasiski(ct).key(5))
    console.log(kappa_periodic([ct]))
}

{
    
    const eye_messages = [[50,66,5,75,74,19,13,48,57,38,22,55,28,6,8,38,45,18,26,33,2,5,1,41,68,79,40,57,38,74,63,59,20,14,49,31,32,20,78,34,2,70,12,70,74,13,42,69,16,40,77,4,80,0,5,8,29,61,11,5,72,76,72,73,34,20,81,62,36,59,24,80,60,24,47,82,48,20,66,43,79,31,73,62,49,82,44,27,25,73,67,7,24,30,28,49,8,25,26,65,5,11,16,49,67,54,53,36,47,48,24,18],[63,66,5,75,74,19,13,48,57,38,22,55,28,6,8,38,45,18,26,33,2,5,1,41,68,79,40,15,79,33,29,35,76,77,52,49,8,54,33,57,9,4,45,64,1,29,81,73,11,17,25,32,40,42,5,38,21,53,81,22,41,13,61,11,35,60,58,50,79,59,24,80,60,24,47,82,48,20,66,43,79,31,73,62,49,82,44,27,25,73,49,0,35,7,0,24,12,46,52,42,58,23,34,16,41,32,39,82,61,0,80,21,51,50,21,35],[76,66,5,75,74,19,13,48,57,38,22,55,28,6,8,38,45,18,26,33,2,5,1,41,68,79,40,15,79,33,20,35,48,80,63,75,55,34,45,61,0,18,42,0,68,14,79,64,6,38,17,4,13,55,59,62,42,47,70,44,55,68,24,70,59,45,18,23,32,53,62,28,46,39,7,38,77,51,35,80,70,39,56,53,69,36,9,59,10,66,73,47,2,40,76,48,72,15,78,36,6,22,34,16,22,59,0,55,16,48,55,29,10,10,26,9,76,79,78,31,58,60,19,82,30,58,21,25,26,29,29,48,15,66,57,12,43,50,70,12,60,35],[6,66,5,8,36,8,8,8,7,8,59,66,82,63,70,12,32,39,78,33,37,51,70,77,4,62,13,23,0,37,39,35,48,60,22,66,66,34,39,55,46,33,47,0,68,64,70,13,70,18,57,49,55,21,77,46,43,47,0,24,55,69,80,81,59,25,18,68,38,52,5,66,54,51,11,14,31,30,28,0,20,36,21,32,8,44,38,35,17,40,76,66,2,21,63,48],[19,66,5,8,36,8,20,4,81,45,9,8,36,32,31,52,57,16,48,27,70,32,49,29,21,65,55,29,40,79,11,42,69,80,30,22,78,69,59,76,77,82,20,64,19,80,70,4,77,29,60,11,11,4,77,76,3,35,64,33,32,47,29,52,32,17,6,71,44,41,8,82,54,27,75,72,12,40,79,45,56,75,15,67,6,7,49,44,82,26,53,0,50,81,13,25,13,22,80,77,74,73,72],[32,66,5,8,36,22,32,80,7,77,78,57,82,0,31,9,39,32,49,1,66,75,1,41,3,65,45,7,33,74,76,74,76,33,47,49,51,36,46,24,9,78,46,58,47,72,20,69,6,0,43,51,13,42,77,2,70,12,21,32,15,63,25,74,0,45,77,29,36,10,0,74,63,60,47,49,25,69,18,16,43,48,73,44,46,29,12,44,7,14,53,2,51,30,28,65,44,0,82,69,5,53,45],[45,66,5,8,36,8,20,4,79,67,71,81,4,0,54,38,45,18,22,0,1,5,1,41,41,20,45,57,33,76,63,10,24,60,66,70,63,18,17,77,78,62,74,29,74,13,11,73,48,61,31,23,55,21,75,53,44,33,34,38,62,49,45,60,35,20,81,41,4,42,4,28,62,57,71,19,24,20,42,0,43,47,2,18,77,3,70,67,61,19,76,67,24,77,38,75,38,25,76,81,0,38,42,15,26,45,6,37,16,34,27,29,50,3,12,25,47,35,69,1,74,25,21],[58,66,5,8,36,8,20,4,79,67,71,81,4,0,54,38,45,18,22,77,68,32,44,44,49,20,20,29,36,1,63,59,55,60,22,0,51,68,13,76,71,33,68,60,42,80,0,23,70,36,17,75,73,57,24,62,23,21,60,80,49,30,25,81,17,40,66,53,3,41,7,69,82,6,78,14,6,40,3,0,76,56,48,13,18,60,73,80,72,78,10,54,0,31,78,36,13,46,82,3,51,23,12,0,75,58,67,55,30,82,46,23,1,34,66,42,30,21,52,57,39,60,10,13,9,29,18,28,0,29,79,76,52,48],[71,66,5,8,36,8,20,4,79,67,71,81,4,0,54,38,45,18,22,1,68,36,1,41,41,20,45,57,33,76,63,10,24,60,26,23,51,34,17,77,78,62,74,29,74,13,0,4,11,38,80,25,55,2,47,53,44,33,34,38,62,49,45,60,35,45,81,62,36,46,19,68,54,51,71,69,7,40,79,29,3,59,14,18,20,52,44,10,10,7,65,1,24,81,61,23,49,19,77,71,21,65,42,78,68,39,17,16,64,77,27,63,0,42,71,0,75,21,34]]
    // const eye_messages = [[50,66,5,75,74,19,13,48,57,38,22,55,28,6,8,38,45,18,26,33,2,5,1,41,68,79,40,57,38,74,63,59,20,14,49,31,32,20,78,34,2,70,12,70,74,13,42,69,16,40,77,4,80,0,5,8,29,61,11,5,72,76,72,73,34,20,81,62,36,59,24,80,60,24,47,82,48,20,66,43,79,31,73,62,49,82,44,27,25,73,67,7,24,30,28,49,8,25,26,65,5,11,16,49,67,54,53,36,47,48,24,18]]
    console.log(kappa_periodic(eye_messages, 4, 112))

    const ct = Vigenere.encrypt("THISISATESTOFTHEEMERGENCYBROADCASTSYSTEM", "AAKEY")
    const ct2 = Vigenere.encrypt("ANDTHISISANOTHERTESTOFTHEEMERGENCYBROADCASTSYSTEMBUTLONGER", "AAKEY")
    const ct3 = Vigenere.encrypt("YETANOTHERTESTOFTHEEMERGENCYBROADCASTSYSTEMANDTHISTIMEITISALOTLONGER", "AAKEY")
    console.log(ct)
    // const ints = [
    //     ct.split("").map(v => az26.indexOf(v)),
    //     ct2.split("").map(v => az26.indexOf(v)),
    //     ct3.split("").map(v => az26.indexOf(v)),
    // ]
    // console.log(ints)
    console.log(kappa_periodic([ct,ct2,ct3]))
    console.log(ct.ic(1,10))
    

    // console.log(Arrays.zip([1,2],[2,4]))
}

{
    // https://pages.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-IOC.html
    const pt = "THERE ARETW OWAYS OFCON STRUC TINGA SOFTW AREDE SIGNO NEWAY ISTOM AKEIT SOSIM PLETH ATTHE REARE OBVIO USLYN ODEFI CIENC IESAN DTHEO THERW AYIST OMAKE ITSOC OMPLI CATED THATT HEREA RENOO BVIOU SDEFI CIENC IESTH EFIRS TMETH ODISF ARMOR EDIFF ICULT".replace(/ /g, "")
    const f = new Frequencies(pt)
    console.log(f)
    console.log(f.ic_mono())
}

{
    const ct = "VVQGY TVVVK ALURW FHQAC MMVLE HUCAT WFHHI PLXHV UWSCI GINCM UHNHQ RMSUI MHWZO DXTNA EKVVQ GYTVV QPHXI NWCAB ASYYM TKSZR CXWRP RFWYH XYGFI PSBWK QAMZY BXJQQ ABJEM TCHQS NAEKV VQGYT VVPCA QPBSL URQUC VMVPQ UTMML VHWDH NFIKJ CPXMY EIOCD TXBJW KQGAN".replace(/ /g, "")
    console.log(new Kasiski(ct).distances())
    console.log(ct.ic(3,15))
    console.log(kappa_periodic([ct]))
    console.log(new Kasiski(ct).key(8))
    console.log(Chi.key(ct,8))
}

{
    // https://pages.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-Kasiski.html
    const ct = "LFWKI MJCLP SISWK HJOGL KMVGU RAGKM KMXMA MJCVX WUYLG GIISW ALXAE YCXMF KMKBQ BDCLA EFLFW KIMJC GUZUG SKECZ GBWYM OACFV MQKYF WXTWM LAIDO YQBWF GKSDI ULQGV SYHJA VEFWB LAEFL FWKIM JCFHS NNGGN WPWDA VMQFA AXWFZ CXBVE LKWML AVGKY EDEMJ XHUXD AVYXL".replace(/ /g, "")
    console.log("LFWKI", new Kasiski(ct).distances())
    console.log(ct.ic(3,15))
    console.log(kappa_periodic([ct]))
}

{
    const ct = "CWNTQHURZEMDFXUKGOUCHAVQTHNALZHXSEEIXHOQXKXDVPUCBSRRWQKQYWJLGJVLSMFBIWXQRVEIWEATMWNTPPBXZMXTYMSXWRQCGAUOFZWKMYXQCXBUMCYGMUZSNWBKEZWEZKZJJDXMISGYPHAVEDTEPKZQCIQSAHHEAFNQWFSXMXJBSMGLTABXTYRQNAJCYXQIAVNGVSNEKDTAZKZKLPUWUOTLMIHARSDLSZDISWWPUOAWUTSQRMUDMYYVGKHKQUQSFZEJDFBLRMJHVQQJZBMTBILRHSFBIBDACXTMIIFOABASELCRTWRJUXWSIBKEBZGEQZSQECSXVAKJMLUNEYDHNRBXFPBAKWABDLNOVNFNDCKBRHQLQZUIFYGARKAMYUJEEHCTBHQGVILDZTJEJCXGLUOJGOJUPTTNDBNVBWQDOVKPTPPRGAKJZCLPVXUUIPPMI"
    console.log("CWNTQ", new Kasiski(ct).distances())
    console.log(ct.ic(3,100))
    console.log(kappa_periodic([ct]))
    const kt = Chi.key(ct,78)
    console.log(kt)
    console.log(Vigenere.decrypt(ct, kt))
}

{
    // https://pages.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-Recover.html
    const ct = "YITZUGRFFETZZOCGSITSXUEAHEIKUTP"
    console.log(new Kasiski(ct).distances())
    console.log(ct.ic(3,15))
    console.log(kappa_periodic([ct]))
    const kt = Chi.key(ct,4)
    console.log(kt)
    console.log(Vigenere.decrypt(ct, "MARS"))
}

{
    const ct = "WQXYM REOBP VWHTH QYEQV EDEXR BGSIZ SILGR TAJFZ OAMAV VXGRF QGKCP IOZIJ BCBLU WYRWS TUGVQ PSUDI UWOES FMTBT ANCYZ TKTYB VFDKD ERSIB JECAQ DWPDE RIEKG PRAQF BGTHQ KVVGR AXAVT HARQE ELUEC GVVBJ EBXIJ AKNGE SWTKB EDXPB QOUDW VTXES MRUWW RPAWK MTITK HFWTD AURRV FESFE STKSH FLZAE ONEXZ BWTIA RWWTT HQYEQ VEDEX RBGSO REDMT ICM".replace(/ /g, "")
    console.log(new Kasiski(ct).distances())
    console.log(ct.ic(3,15))
    console.log(kappa_periodic([ct]))
    const kt = Chi.key(ct,7)
    console.log(kt)
}

{
    const ct = [
        "MLVXK QNXVD GIRIE IMNEE FEXVP HPVZR UKSEK MVQCI VXSFW GVART YBZKJ WVUPV XZCBD BDOLS GHINZ LJCTE KSLPY VPBYD WTRJK BDDFA ANJXE XGHED ERYVP YPWDJ DFTJV ZHTWB WXTMF OZDOJ".replace(/ /g, ""),
        "ULJCY GXAEU DTEIL UZBRW GJZSS QLUOX PTFOO NWSHD BPTJO HQRYY YAXRZ KTEMP UAYMK ISRDZ VUVKW HXAYD YAGSM CURBZ LBXOV EBBPI BMLCB UMAXF ZSLXV QFXUE MPZMK MQZZT KMURW EJVB".replace(/ /g, ""),
        "YLMKW CBGSF VGABP HOZFV QQNSQ NQLQL DIGXM XCWAI QFJOQ TYDEL MBMJB SEPSO DHREM ELKIP KXNMW QYBIH BHFDC GLYWC YGMMP EEXZH UBBSB SBONG URQKW YRAYU NYUCS LNEMV VNSXN WGVME MXPDF WGTZE KRLGU ZJFZJ W".replace(/ /g, ""),
        "UFHUJ LTMKJ PONFG RIUGG OZGWS UBNMW WGILB JNXTD BPREX MMWHB OBFVO TFGSJ SLXEH RTZMI LLUUX FIFWC PGSBA KRCAS XWKQV SLDKS NTESD QVQBN RZDMB JQLYH LTMXB BSVWL ILKYU NMFEB HB".replace(/ /g, ""),
        "VJZCQ KZJJK DCVQD KSSXY TSUXE GRROH PXKZF ZKFMS VGDWU XLTBW EXHEF AWQWF ZESMX GWCEM JPNVB GRJGB IBWOH YMOAP IZYNX GXMSB OZZGK FVURN NJFGQ DTPLV STOID DWVLR TXTBH WNWIE YJXXW BKOJQ FOUHO T".replace(/ /g, ""),
    ]
    console.log(new Kasiski(ct.join("")).distances(5,5))
    console.log(ct[0].ic(3,125))
    console.log(kappa_periodic(ct, 0, 125))
    const kt = Chi.key(ct[0],115)
    console.log(kt)
    console.log(Vigenere.decrypt(ct[0], kt))
}

{
    const pt = "THEFITNESSGRAMPACERTESTISAMULTISTAGEAEROBICCAPACITYTESTTHATPROGRESSIVELYGETSMOREDIFFICULTASITCONTINUESTHETWENTYMETERPACERTESTWILLBEGININTHIRTYSECONDSLINEUPATTHESTARTTHERUNNINGSPEEDSTARTSSLOWLYBUTGETSFASTEREACHMINUTEAFTERYOUHEARTHISSIGNALASINGLELAPSHOULDBECOMPLETEDEACHTIMEYOUHEARTHISSOUNDREMEMBERTORUNINASTRAIGHTLINEANDRUNASLONGASPOSSIBLETHESECONDTIMEYOUFAILTOCOMPLETEALAPBEFORETHESOUNDYOURTESTISOVERTHETESTWILLBEGINONTHEWORDSTARTONYOURMARKGETREADYSTART"
    const ct = Autokey.encrypt(pt, "CRYPTOGRAPHY", az83)
    console.log(ct)
    console.log(kappa_periodic([ct], 0, 25))
    console.log(Chi.key(ct, 12, az83))
    console.log(new Kasiski(ct).key(12, az83))
}

{
    const ct = [
        "CRLHNMCHOHLQHNBX",
        "GRGYLNR.VCDWOCSB", 
        "ANNQNKCHNIDNDNNL",
        "OLMRMXHBQNRCKFSR",
        "XQCHCTYNBZQSMSXN",
        "SJRKHCRWRYD.ANQC",
        "NNCTXMMZFNEDXSRU",
        "RKGBMJSACAKXRUZR",
        "CQUHWNRRRMRLYNT.",
        "BNAQHRSXNUKBQXGC",
        "DQBZWUBOFBJHRSNR",
        "DEDEKXMJDARNSBAD",
        ".MPQMSQQRBNMDNWH",
        "BXSJMJDCONQNSRZB",
        "WNDKSYQSQDRFCCYD",
        "RRSJXNJRVAUXVXHA"
    ]
    const f_ct = new Frequencies(ct.join("")).substitute()
    // const f_ct = ct.join("")
    console.log(kappa_periodic([f_ct], 0, 25))
    console.log(f_ct.ic(3,25))
    // console.log(new Kasiski(f_ct).duplicates(12))
    console.log(new Kasiski(f_ct).distances(3,4))
    console.log(Chi.key(f_ct, 23))
    console.log(new Kasiski(f_ct).key(23))
    console.log(Vigenere.decrypt(f_ct, "LAZAAHNAAQAAAMZAARTCUAG"))
}

{
    const ct = pt.map(v => Autokey.encrypt(v, "i!i", az83))
    ct.forEach(v => console.log(v))
    console.log(ct.map(v => v.split("").map(w => w.charCodeAt(0) - 32)))
    console.log(new Frequencies(ct.join(""), az83).sorted)
    console.log(kappa_periodic(ct))
    console.log(new Kasiski(ct[0]).distances(3,4))
    console.log(ct[0].ic(3,25,az83))
    ct.forEach(v => console.log(Autokey.decrypt(v, "i!i", az83)))
    console.log(Vigenere.decrypt(ct[0].shift(2), ct[0], az83))
}

// {
//     const eyes = decode(10, [0,1,2,3,4])
//     eyes.forEach(v => console.log(Cipherkey.decrypt(v, "i!i", az83)))
//     console.log(Vigenere.decrypt(eyes[0].shift(1), eyes[0], az83))
//     console.log(eyes[0].ic(3,100,az83))
//     console.log(Chi.key(eyes[0], 43, az83))
// }

// https://www.dcode.fr/modular-exponentiation
function reverse(e, m, r) {
    for (var i = 0; i < m; i++) {
        const a = (i**e) % 83
        if (a == r) {
            return i
        }

    }
}

{
    const s = new Set()
    for (var i = 0; i < 83; i++) {
        const v = (i**3) % 83
        s.add(v)
        // console.log(i, v, reverse(3, 83, v))
    }
    console.log(s)
}